using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace OSMaker.Classes
{
    class standbox
    {
        // This contain some unclassable fonctions names for OSMaker

        public class oscpc
        {
            // OS informations
            public string os_name;
            public string os_SystemName;
            public string MediaPath;
            public string AutorsNames;
            public string CompagnyName;
            public string CreationDate;

            // Screen dekstop
            public bool Resolution_auto;
            public string Resolution;
            public string Resolution_bit;

            public string Background_image;
            public int Background_Color_R;
            public int Background_Color_G;
            public int Background_Color_B;

            public bool DesktopIcons;
        }

        public class bootanimation
        {
            public string EnableBootScreen;
            public string BootScreenResolution;
            public string Images_PerSec;
            public string Images_Number;
            public string Image_First;
            public string Image_Loop;
            public string Image_Opacity;
            public string BootScreenDarkening;
        }

        public static string Generate_boot_config_contentfile(bootanimation BOOTANIMATION)
        {
            // this allow to create config.cpc content file
            return
            @"// [FR] Ce fichier va permettre d'afficher le boot screen de l'OS" + "\r\n" +
            @"// [EN] This file will able to display OS boot screen" + "\r\n" +
            @"" + "\r\n" +
            @"" + "\r\n" +
            @"CCP/ /SET.LEVEL = 5" + "\r\n" +
            @"" + "\r\n" +
            @"" + "\r\n" +
            @"// [FR] 0:Desactive / 1:Active  le screen boot" + "\r\n" +
            @"// [EN] 0:Disable   / 1:Enable  screen boot" + "\r\n" +
            @"set/ cpc_sys.boot.bootscreen.gui = " + BOOTANIMATION.EnableBootScreen + "\r\n" +
            @"" + "\r\n" +
            @"" + "\r\n" +
            @"// [FR] Resolution d'ecran" + "\r\n" +
            @"// [EN] Screen resolution" + "\r\n" +
            @"set/ cpc_sys.boot.bootscreen.scr_res = " + BOOTANIMATION.BootScreenResolution + "\r\n" +
            @"" + "\r\n" +
            @"" + "\r\n" +
            @"// [FR] Nombre d'images par secondes (IPS)" + "\r\n" +
            @"// [EN] Number frames per seconds (FPS)" + "\r\n" +
            @"set/ cpc_sys.boot.bootscreen.fps = " + BOOTANIMATION.Images_PerSec + "\r\n" +
            @"" + "\r\n" +
            @"" + "\r\n" +
            @"// [FR] Nombre d'images max" + "\r\n" +
            @"// [EN] Max number frames" + "\r\n" +
            @"set/ cpc_sys.boot.bootscreen.size = " + BOOTANIMATION.Images_Number + "\r\n" +
            @"" + "\r\n" +
            @"" + "\r\n" +
            @"// [FR] Numero d'image de commencement" + "\r\n" +
            @"// [EN] Starting image number" + "\r\n" +
            @"set/ cpc_sys.boot.bootscreen.begin = " + BOOTANIMATION.Image_First + "\r\n" +
            @"" + "\r\n" +
            @"" + "\r\n" +
            @"// [FR] Numero d'image de bouclage" + "\r\n" +
            @"// [EN] Looping image number" + "\r\n" +
            @"set/ cpc_sys.boot.bootscreen.loop = " + BOOTANIMATION.Image_Loop + "\r\n" +
            @"" + "\r\n" +
            @"// [FR] Degrade sombre d'entre et sortie (0:Desactive, 1:Debut, 2:Fin, 3:Les deux)" + "\r\n" +
            @"// [EN] Dark entry and exit (0:Disable, 1:Begin, 2:End, 3:Both)" + "\r\n" +
            @"set/ cpc_sys.boot.bootscreen.darkening = " + BOOTANIMATION.BootScreenDarkening + "\r\n" +
            @"" + "\r\n" +
            @"" + "\r\n" +
            @"// [FR] Opacite des transitions (128 a 255)" + "\r\n" +
            @"// [EN] Frames opacity (128 to 255)" + "\r\n" +
            @"set/ cpc_sys.boot.bootscreen.frames_opacity = " + BOOTANIMATION.Image_Opacity + "\r\n";
        }
        public static string Generate_OS_CPC_contentfile(oscpc OSCPC)
        {
            // This allow to create OS.CPC content file with informations

            return
                @"// ** OS.CPC file generated by OSMaker **" + "\r\n" +
                @"" + "\r\n" +
                @"// Load default gui profile (obligatory)" + "\r\n" +
                @"exe/ & %CPC.REP.KRNL%/CONFIG/ENV_GUI/env_gui.cpc" + "\r\n" +

                @"" + "\r\n" +
                @"// Screen informations" + "\r\n" +
                @"set/ SCR_Auto = " + OSCPC.Resolution_auto.ToString().ToLower() + "\r\n" +
                "if/ \"%SCR_Auto%\" == \"true\" then:" + "\r\n" +
                    "\t// set/ SCR_RES = /f:cpc.check_best_resolution()" + "\r\n" +
                    "\t// set/ SCR_BIT = /f:cpc.check_best_resolution_color()" + "\r\n" +
                @"else:" + "\r\n" +
                    "\tset/ SCR_RES = " + OSCPC.Resolution + "\r\n" +
                    "\tset/ SCR_BIT = " + OSCPC.Resolution_bit + "\r\n" +
                @"end/ if" + "\r\n" +
                @"" + "\r\n" +
                @"// Default background color" + "\r\n" +
                @"SET/ SCR_COLOR = " + OSCPC.Background_Color_R.ToString("D3") + "," + OSCPC.Background_Color_G.ToString("D3") + "," + OSCPC.Background_Color_B.ToString("D3") + "\r\n" +
                @"" + "\r\n" +
                @"// Default background screen" + "\r\n" +
                @"SET/ SCR_IMG = " + OSCPC.Background_image + "\r\n" +
                @"" + "\r\n" +
                @"ccp/ /set.level = 4" + "\r\n" +
                @"" + "\r\n" +
                @"" + "\r\n" +

                @"// **************************************************" + "\r\n" +
                @"// ** [EN] Operating system informations           **" + "\r\n" +
                @"// ** [FR] Informations du systeme d'exploitation  **" + "\r\n" +
                @"// **************************************************" + "\r\n" +
                @"" + "\r\n" +
                @"set/ OS_NAME = " + OSCPC.os_name + "" + "\r\n" +
                @"set/ OS_Author = " + OSCPC.AutorsNames + "\r\n" +
                @"set/ OS_Compagny = " + OSCPC.CompagnyName + "\r\n" +
                @"set/ OS_Created = " + OSCPC.CreationDate + "\r\n" +
                @"set/ OS_Updated = " + OSCPC.CreationDate + "\r\n" +
                @"" + "\r\n" +
                @"" + "\r\n" +
                @"// ***************************************************" + "\r\n" +
                @"// ** [EN] Operating system configuration           **" + "\r\n" +
                @"// ** [FR] Configuration du systeme d'exploitation  **" + "\r\n" +
                @"// ***************************************************" + "\r\n" +
                @"" + "\r\n" +
                @"set/ HOST_OS = OS/" + OSCPC.os_SystemName + "\r\n" +
                @"set/ GUI_OS = " + OSCPC.MediaPath + "\r\n" +
                @"" + "\r\n" +
                @"// Background image" + "\r\n" +
                @"set/ SCR_IMG = " + OSCPC.Background_image + "\r\n" +
                @"" + "\r\n" +
                @"// Screenshot folder" + "\r\n" +
                @"set/ SCR_SAVE = %CPC_TEMP%/SCR" + "\r\n" +
                @"" + "\r\n" +
                @"// ******************************************************" + "\r\n" +
                @"// ** [EN] Starting Graphic User Interface             **" + "\r\n" +
                @"// ** [FR] Demarrer l'interface utilisateur graphique  **" + "\r\n" +
                @"// ******************************************************" + "\r\n" +
                @"gui/ " + "\r\n" +
                @"" + "\r\n" +
                @"// Load icon on GUI" + "\r\n" +
                @"sys/ /fileformat-gui-load" + "\r\n" +
                @"" + "\r\n" +
                @"// Desktop icons" + "\r\n" +
                @"set/ Desktop_Icons = " + OSCPC.DesktopIcons + "\r\n" +
                @"" + "\r\n" +
                "if/ \"%desktop_Icons%\" == \"true\" then:" + "\r\n" +
                    "\tset/ pos_x = 0" + "\r\n" +
                    "\tset/ pos_y = 30" + "\r\n" +
                    "\tset/ size_x = %CPC.SCR.X%" + "\r\n" +
                    "\tset/ size_y = %CPC.SCR.Y%" + "\r\n" +
                    "\t" + "\r\n" +
                    "\t// Execute desktop function" + "\r\n" +
                    "\tset/ handle_desktop = /F:Init_Desktop(MyDesktop, ./, %pos_x%, %pos_y%, %size_X%, %size_Y%)" + "\r\n" +
                @"end/ if" + "\r\n" +
            @"" + "\r\n" +
            @"" + "\r\n" +
            @"" + "\r\n" +
            @"" + "\r\n";
        }

        public static string getVariableFromCPCFile(string cpcfile, string variable_name)
        {
            // This function allow to getting raw variable content

            variable_name = variable_name.ToUpper();
            using (StreamReader ReaderObject = new StreamReader(cpcfile))
            {
                string Line;
                // ReaderObject reads a single line, stores it in Line string variable and then displays it on console
                while ((Line = ReaderObject.ReadLine()) != null)
                {
                    Line = Line.Replace("\t", "");
                    Line = Line.Replace("  ", " ");
                    String Line_tmp = Line.ToUpper();

                    int Position_Variable = Line_tmp.IndexOf(variable_name);

                    // If variable is in line
                    if (Position_Variable > 0)
                    {
                        // And there are comments
                        if((Line_tmp.IndexOf("// ") == 0) || (Line_tmp.IndexOf("REM/ ") == 0))
                        {
                            continue;
                        }
                        else
                        {
                            // If "set/" command is in begin
                            int PositionSET = Line_tmp.IndexOf("SET/ ");
                            if(PositionSET == 0)
                            {
                                // If set/ command is before variable name
                                if(PositionSET < Position_Variable)
                                {
                                    int PositionEgale = Line_tmp.IndexOf(" = ");
                                    if(Position_Variable < PositionEgale)
                                    {
                                        // FOUND ! :-)
                                        string VariableContent = Line.Substring(PositionEgale + 3);
                                        return VariableContent;

                                    }

                                }
                            }
                        }
                    }
                }
            }
            return "";
            

        }


        public static bool IsValidPath(string path, bool allowRelativePaths = false)
        {
            bool isValid = true;

            try
            {
                string fullPath = Path.GetFullPath(path);

                if (allowRelativePaths)
                {
                    isValid = Path.IsPathRooted(path);
                }
                else
                {
                    string root = Path.GetPathRoot(path);
                    isValid = string.IsNullOrEmpty(root.Trim(new char[] { '\\', '/' })) == false;
                }
            }
            catch (Exception ex)
            {
                isValid = false;
            }

            return isValid;
        }

        public static void DirectoryCopy(string sourceDirName, string destDirName, bool copySubDirs)
        {
            // Get the subdirectories for the specified directory.
            DirectoryInfo dir = new DirectoryInfo(sourceDirName);

            if (!dir.Exists)
            {
                throw new DirectoryNotFoundException(
                    "Source directory does not exist or could not be found: "
                    + sourceDirName);
            }

            DirectoryInfo[] dirs = dir.GetDirectories();

            // If the destination directory doesn't exist, create it.       
            Directory.CreateDirectory(destDirName);

            // Get the files in the directory and copy them to the new location.
            FileInfo[] files = dir.GetFiles();
            foreach (FileInfo file in files)
            {
                string tempPath = Path.Combine(destDirName, file.Name);
                file.CopyTo(tempPath, true);
            }

            // If copying subdirectories, copy them and their contents to new location.
            if (copySubDirs)
            {
                foreach (DirectoryInfo subdir in dirs)
                {
                    string tempPath = Path.Combine(destDirName, subdir.Name);
                    DirectoryCopy(subdir.FullName, tempPath, copySubDirs);
                }
            }
        }
    }
}
